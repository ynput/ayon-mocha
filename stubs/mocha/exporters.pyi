import PySide2.QtCore
import Shiboken
from typing import ClassVar, TYPE_CHECKING

if TYPE_CHECKING:
    from mocha.project import Project, Layer, View

class AbstractCameraSolveExporter(PySide2.QtCore.QObject):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def do_export(self, *args, **kwargs): ...
    def error_string(self, *args, **kwargs): ...
    def get_exports_multiple_views(self, *args, **kwargs): ...
    def is_registered(self, *args, **kwargs): ...
    def register(self, *args, **kwargs): ...
    @staticmethod
    def registered_exporters(*args, **kwargs): ...
    def unregister(self, *args, **kwargs): ...
    def __delattr__(self, name): ...
    def __setattr__(self, name, value): ...
    @property
    def exports_multiple_views(self): ...
    @property
    def registered(self): ...

class AbstractShapeDataExporter(PySide2.QtCore.QObject):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def do_export(self, *args, **kwargs): ...
    def error_string(self, *args, **kwargs): ...
    def get_exports_interlaced(self, *args, **kwargs): ...
    def get_exports_multiple_shapes(self, *args, **kwargs): ...
    def get_exports_multiple_views(self, *args, **kwargs): ...
    def get_exports_open_splines(self, *args, **kwargs): ...
    def is_registered(self, *args, **kwargs): ...
    def register(self, *args, **kwargs): ...
    @staticmethod
    def registered_exporters(*args, **kwargs): ...
    def unregister(self, *args, **kwargs): ...
    def __delattr__(self, name): ...
    def __setattr__(self, name, value): ...
    @property
    def exports_interlaced(self): ...
    @property
    def exports_multiple_shapes(self): ...
    @property
    def exports_multiple_views(self): ...
    @property
    def exports_open_splines(self): ...
    @property
    def registered(self): ...

class AbstractTrackingDataExporter:

    def do_export(self,
                  project: Project,
                  layer: Layer,
                  tracking_file_path: str,
                  time: float,
                  view: View,
                  options: dict[str, bool]): ...
    def error_string(self, *args, **kwargs): ...
    def get_exports_interlaced(self, *args, **kwargs): ...
    def get_exports_multiple_views(self, *args, **kwargs): ...
    def get_removes_lens_distortion(self, *args, **kwargs): ...
    def is_registered(self, *args, **kwargs): ...
    def register(self, *args, **kwargs): ...
    @staticmethod
    def registered_exporters(*args, **kwargs): ...
    def unregister(self, *args, **kwargs): ...
    @property
    def exports_interlaced(self): ...
    @property
    def exports_multiple_views(self): ...
    @property
    def exports_removed_lens_distortion(self): ...
    @property
    def registered(self): ...

class CameraSolveExporter(AbstractCameraSolveExporter):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def do_export(self, *args, **kwargs): ...
    def error_string(self, *args, **kwargs): ...
    def __delattr__(self, name): ...
    def __setattr__(self, name, value): ...

class ShapeDataExporter(AbstractShapeDataExporter):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def do_export(self, *args, **kwargs): ...
    def error_string(self, *args, **kwargs): ...
    def __delattr__(self, name): ...
    def __setattr__(self, name, value): ...

class ShapeExportData(Shiboken.Object):
    def __init__(self, *args, **kwargs) -> None: ...
    def get_baked_in_keyframes(self, *args, **kwargs): ...
    def get_extra_matrix(self, *args, **kwargs): ...
    def get_filmback_aspect_ratio(self, *args, **kwargs): ...
    def get_frame_height(self, *args, **kwargs): ...
    def get_frame_width(self, *args, **kwargs): ...
    def get_keyframes_only(self, *args, **kwargs): ...
    def get_layer(self, *args, **kwargs): ...
    def get_pixel_aspect_ratio(self, *args, **kwargs): ...
    def get_transforms(self, *args, **kwargs): ...
    def get_view(self, *args, **kwargs): ...
    def get_xspline_support(self, *args, **kwargs): ...
    def __copy__(self): ...
    @property
    def baked_in_keyframes(self): ...
    @property
    def extra_matrix(self): ...
    @property
    def filmback_aspect_ratio(self): ...
    @property
    def frame_height(self): ...
    @property
    def frame_width(self): ...
    @property
    def keyframes_only(self): ...
    @property
    def layer(self): ...
    @property
    def pixel_aspect_ratio(self): ...
    @property
    def transforms(self): ...
    @property
    def view(self): ...
    @property
    def xspline_support(self): ...

class TrackingDataExporter(AbstractTrackingDataExporter):
    ...

