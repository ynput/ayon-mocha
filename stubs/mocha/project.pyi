import types
from typing import ClassVar, Optional, Union

import PySide2.QtCore
import Shiboken
from _typeshed import Incomplete

BGRColorAlphaFormat: PixelFormat
BGRColorFormat: PixelFormat
BoolType: ChannelType
ByLayer: ColorizeOutput
ByMatteColor: ColorizeOutput
CharType: ChannelType
DoubleType: ChannelType
FloatConversion: ColorConversion
FloatType: ChannelType
Grayscale: ColorizeOutput
GreyLevelAlphaFormat: PixelFormat
GreyLevelFormat: PixelFormat
IntType: ChannelType
InvalidInterlaceMode: InterlaceMode
LinearColorspace: Colorspace
LogColorspace: Colorspace
LongDoubleType: ChannelType
LongLongType: ChannelType
LongType: ChannelType
LowerFieldFirst: InterlaceMode
NoneConversion: ColorConversion
NotInterlaced: InterlaceMode
PanalogColorspace: Colorspace
PointerType: ChannelType
RGBASFormat: PixelFormat
RGBColorAlphaFormat: PixelFormat
RGBColorFormat: PixelFormat
RGBXFormat: PixelFormat
ShortType: ChannelType
StringType: ChannelType
UCharType: ChannelType
UInt10Type: ChannelType
UInt12Type: ChannelType
UIntType: ChannelType
ULongType: ChannelType
UShortType: ChannelType
UndefinedFormat: PixelFormat
UndefinedType: ChannelType
UpperFieldFirst: InterlaceMode
VectorField2DFormat: PixelFormat
VectorField3DFormat: PixelFormat
YUV422Format: PixelFormat
YUVA444Format: PixelFormat
YUVX444Format: PixelFormat

class BezierContour(Shiboken.Object):
    control_points: Incomplete
    psets: ParameterSet
    def __init__(self, *args, **kwargs) -> None: ...
    def control_point(self, *args, **kwargs): ...
    def get_bounding_rect(self, *args, **kwargs): ...
    def get_control_points(self, *args, **kwargs): ...
    def insert_point(self, *args, **kwargs): ...
    def isNull(self, *args, **kwargs): ...
    def parameter(self, *args, **kwargs): ...
    def parameter_set(self, *args, **kwargs): ...
    def remove(self, *args, **kwargs): ...
    def set_control_points(self, *args, **kwargs): ...
    def __bool__(self) -> bool: ...
    def __copy__(self): ...
    def __delattr__(self, name): ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __setattr__(self, name, value): ...

class BezierControlPoint(Shiboken.Object):
    psets: ParameterSet
    selected: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def get_master_point(self, *args, **kwargs): ...
    def get_point_data(self, *args, **kwargs): ...
    def get_selected(self, *args, **kwargs): ...
    def parameter(self, *args, **kwargs): ...
    def parameter_set(self, *args, **kwargs): ...
    def remove(self, *args, **kwargs): ...
    def set_master_point(self, *args, **kwargs): ...
    def set_point_data(self, *args, **kwargs): ...
    def set_selected(self, *args, **kwargs): ...
    def update_point_data(self, *args, **kwargs): ...
    def __bool__(self) -> bool: ...
    def __copy__(self): ...
    def __delattr__(self, name): ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __setattr__(self, name, value): ...
    @property
    def master_point(self): ...

class BezierControlPointData(Shiboken.Object):
    active: Incomplete
    corner: Incomplete
    edge_angle_ratio: Incomplete
    edge_width: Incomplete
    handle_offset_backward: Incomplete
    handle_offset_forward: Incomplete
    x: Incomplete
    y: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def get_active(self, *args, **kwargs): ...
    def get_corner(self, *args, **kwargs): ...
    def get_edge_angle_ratio(self, *args, **kwargs): ...
    def get_edge_width(self, *args, **kwargs): ...
    def get_handle_offset_backward(self, *args, **kwargs): ...
    def get_handle_offset_forward(self, *args, **kwargs): ...
    def get_x(self, *args, **kwargs): ...
    def get_y(self, *args, **kwargs): ...
    def set_active(self, *args, **kwargs): ...
    def set_corner(self, *args, **kwargs): ...
    def set_edge_angle_ratio(self, *args, **kwargs): ...
    def set_edge_width(self, *args, **kwargs): ...
    def set_handle_offset_backward(self, *args, **kwargs): ...
    def set_handle_offset_forward(self, *args, **kwargs): ...
    def set_x(self, *args, **kwargs): ...
    def set_y(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class ChannelType(Shiboken.Enum):
    BoolType: ClassVar[ChannelType] = ...
    CharType: ClassVar[ChannelType] = ...
    DoubleType: ClassVar[ChannelType] = ...
    FloatType: ClassVar[ChannelType] = ...
    IntType: ClassVar[ChannelType] = ...
    LongDoubleType: ClassVar[ChannelType] = ...
    LongLongType: ClassVar[ChannelType] = ...
    LongType: ClassVar[ChannelType] = ...
    PointerType: ClassVar[ChannelType] = ...
    ShortType: ClassVar[ChannelType] = ...
    StringType: ClassVar[ChannelType] = ...
    UCharType: ClassVar[ChannelType] = ...
    UInt10Type: ClassVar[ChannelType] = ...
    UInt12Type: ClassVar[ChannelType] = ...
    UIntType: ClassVar[ChannelType] = ...
    ULongType: ClassVar[ChannelType] = ...
    UShortType: ClassVar[ChannelType] = ...
    UndefinedType: ClassVar[ChannelType] = ...
    values: ClassVar[dict] = ...
    name: Incomplete
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def __add__(self, other): ...
    def __and__(self, other): ...
    def __bool__(self) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __mul__(self, other): ...
    def __ne__(self, other: object) -> bool: ...
    def __or__(self, other): ...
    def __pos__(self): ...
    def __radd__(self, other): ...
    def __rand__(self, other): ...
    def __reduce__(self): ...
    def __rmul__(self, other): ...
    def __ror__(self, other): ...
    def __rsub__(self, other): ...
    def __rxor__(self, other): ...
    def __sub__(self, other): ...
    def __xor__(self, other): ...

class Clip:
    color_parameters: ColorParameters
    first_frame_offset: int
    frame_rate: float
    frame_size: float
    psets: ParameterSet
    def __init__(self,
        clip_path: str,
        validate: Optional[bool] = False,
        width: Optional[int] = 0,
        height: Optional[int] = 0,
        length: Optional[int] = 0,
    ) -> None: ...
    def add_stream(self,
        first_clip_file: str,
        view: View,
        start_frame: int,
        stop_frame: int,
        validate: Optional[bool] = False,
    ): ...
    def apply(self,
        stream_info: StreamInfo,
        view: Optional[View] = None,
    ): ...
    def assign_project_view(self,
        view: View,
        proj_view: View,
    ): ...
    def base_parameter_set(self, *args, **kwargs): ...
    def delete_stream(self, *args, **kwargs): ...
    def export(self, *args, **kwargs): ...
    def get_color_parameters(self, *args, **kwargs): ...
    def get_discrete_frames(self, *args, **kwargs): ...
    def get_first_frame_offset(self, *args, **kwargs): ...
    def get_frame_rate(self, *args, **kwargs): ...
    def get_frame_size(self, *args, **kwargs): ...
    def get_id(self, *args, **kwargs): ...
    def get_info(self, *args, **kwargs): ...
    def get_name(self, *args, **kwargs): ...
    def get_progress_watcher(self, *args, **kwargs): ...
    def get_view_mapping(self, *args, **kwargs): ...
    def get_views(self, *args, **kwargs): ...
    def image(self, *args, **kwargs): ...
    def parameter(self, *args, **kwargs): ...
    def parameter_set(self, *args, **kwargs): ...
    def relink(self,
        path: Optional[str] = '',
        prefix: Optional[str] = '',
        suffix: Optional[str] = '',
        start_frame: Optional[int] = 0,
        end_frame: Optional[int] = 0,
        view: Optional[View] = None,
    ) -> None: ...
    def set_color_parameters(self, *args, **kwargs): ...
    def set_first_frame_offset(self, *args, **kwargs): ...
    def set_frame_rate(self, *args, **kwargs): ...
    def set_frame_size(self, *args, **kwargs): ...
    def __delattr__(self, name): ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __setattr__(self, name, value): ...
    @property
    def discrete_frames(self): ...
    @property
    def id(self): ...
    @property
    def name(self): ...
    @property
    def progress_watcher(self): ...
    @property
    def view_mapping(self): ...
    @property
    def views(self): ...

class ColorConversion(Shiboken.Enum):
    FloatConversion: ClassVar[ColorConversion] = ...
    NoneConversion: ClassVar[ColorConversion] = ...
    _8BitConversion: ClassVar[ColorConversion] = ...
    values: ClassVar[dict] = ...
    name: Incomplete
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def __add__(self, other): ...
    def __and__(self, other): ...
    def __bool__(self) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __mul__(self, other): ...
    def __ne__(self, other: object) -> bool: ...
    def __or__(self, other): ...
    def __pos__(self): ...
    def __radd__(self, other): ...
    def __rand__(self, other): ...
    def __reduce__(self): ...
    def __rmul__(self, other): ...
    def __ror__(self, other): ...
    def __rsub__(self, other): ...
    def __rxor__(self, other): ...
    def __sub__(self, other): ...
    def __xor__(self, other): ...

class ColorParameters(PySide2.QtCore.QObject):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    colorspace: Incomplete
    conversion: Incomplete
    gamma: Incomplete
    log_reference_black: Incomplete
    log_reference_white: Incomplete
    offset: Incomplete
    softclip: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def get_colorspace(self, *args, **kwargs): ...
    def get_conversion(self, *args, **kwargs): ...
    def get_gamma(self, *args, **kwargs): ...
    def get_log_reference_black(self, *args, **kwargs): ...
    def get_log_reference_white(self, *args, **kwargs): ...
    def get_offset(self, *args, **kwargs): ...
    def get_softclip(self, *args, **kwargs): ...
    def propertyChanged(self, *args, **kwargs): ...
    def set_colorspace(self, *args, **kwargs): ...
    def set_conversion(self, *args, **kwargs): ...
    def set_gamma(self, *args, **kwargs): ...
    def set_log_reference_black(self, *args, **kwargs): ...
    def set_log_reference_white(self, *args, **kwargs): ...
    def set_offset(self, *args, **kwargs): ...
    def set_softclip(self, *args, **kwargs): ...
    def __delattr__(self, name): ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __setattr__(self, name, value): ...

class ColorizeOutput(Shiboken.Enum):
    ByLayer: ClassVar[ColorizeOutput] = ...
    ByMatteColor: ClassVar[ColorizeOutput] = ...
    Grayscale: ClassVar[ColorizeOutput] = ...
    values: ClassVar[dict] = ...
    name: Incomplete
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def __add__(self, other): ...
    def __and__(self, other): ...
    def __bool__(self) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __mul__(self, other): ...
    def __ne__(self, other: object) -> bool: ...
    def __or__(self, other): ...
    def __pos__(self): ...
    def __radd__(self, other): ...
    def __rand__(self, other): ...
    def __reduce__(self): ...
    def __rmul__(self, other): ...
    def __ror__(self, other): ...
    def __rsub__(self, other): ...
    def __rxor__(self, other): ...
    def __sub__(self, other): ...
    def __xor__(self, other): ...

class Colorspace(Shiboken.Enum):
    LinearColorspace: ClassVar[Colorspace] = ...
    LogColorspace: ClassVar[Colorspace] = ...
    PanalogColorspace: ClassVar[Colorspace] = ...
    values: ClassVar[dict] = ...
    name: Incomplete
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def __add__(self, other): ...
    def __and__(self, other): ...
    def __bool__(self) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __mul__(self, other): ...
    def __ne__(self, other: object) -> bool: ...
    def __or__(self, other): ...
    def __pos__(self): ...
    def __radd__(self, other): ...
    def __rand__(self, other): ...
    def __reduce__(self): ...
    def __rmul__(self, other): ...
    def __ror__(self, other): ...
    def __rsub__(self, other): ...
    def __rxor__(self, other): ...
    def __sub__(self, other): ...
    def __xor__(self, other): ...

class ImageData(Shiboken.Object):
    channel_type: Incomplete
    height: Incomplete
    pixel_format: Incomplete
    pixels: Incomplete
    width: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def flip(self, *args, **kwargs): ...
    def flipped_pixels(self, *args, **kwargs): ...
    def get_channel_type(self, *args, **kwargs): ...
    def get_height(self, *args, **kwargs): ...
    def get_pixel_format(self, *args, **kwargs): ...
    def get_pixels(self, *args, **kwargs): ...
    def get_width(self, *args, **kwargs): ...
    def isNull(self, *args, **kwargs): ...
    def set_channel_type(self, *args, **kwargs): ...
    def set_height(self, *args, **kwargs): ...
    def set_pixel_format(self, *args, **kwargs): ...
    def set_pixels(self, *args, **kwargs): ...
    def set_width(self, *args, **kwargs): ...
    def __bool__(self) -> bool: ...
    def __copy__(self): ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class InterlaceMode(Shiboken.Enum):
    InvalidInterlaceMode: ClassVar[InterlaceMode] = ...
    LowerFieldFirst: ClassVar[InterlaceMode] = ...
    NotInterlaced: ClassVar[InterlaceMode] = ...
    UpperFieldFirst: ClassVar[InterlaceMode] = ...
    _32PulldownLoFirstAA: ClassVar[InterlaceMode] = ...
    _32PulldownLoFirstBB: ClassVar[InterlaceMode] = ...
    _32PulldownLoFirstBC: ClassVar[InterlaceMode] = ...
    _32PulldownLoFirstCD: ClassVar[InterlaceMode] = ...
    _32PulldownLoFirstDD: ClassVar[InterlaceMode] = ...
    _32PulldownUpFirstAA: ClassVar[InterlaceMode] = ...
    _32PulldownUpFirstBB: ClassVar[InterlaceMode] = ...
    _32PulldownUpFirstBC: ClassVar[InterlaceMode] = ...
    _32PulldownUpFirstCD: ClassVar[InterlaceMode] = ...
    _32PulldownUpFirstDD: ClassVar[InterlaceMode] = ...
    values: ClassVar[dict] = ...
    name: Incomplete
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def __add__(self, other): ...
    def __and__(self, other): ...
    def __bool__(self) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __mul__(self, other): ...
    def __ne__(self, other: object) -> bool: ...
    def __or__(self, other): ...
    def __pos__(self): ...
    def __radd__(self, other): ...
    def __rand__(self, other): ...
    def __reduce__(self): ...
    def __rmul__(self, other): ...
    def __ror__(self, other): ...
    def __rsub__(self, other): ...
    def __rxor__(self, other): ...
    def __sub__(self, other): ...
    def __xor__(self, other): ...

class Keyframe(Shiboken.Object):
    def __init__(self, *args, **kwargs) -> None: ...
    def get_time(self, *args, **kwargs): ...
    def get_value(self, *args, **kwargs): ...
    def get_view(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    @property
    def time(self): ...
    @property
    def value(self): ...
    @property
    def view(self): ...

class Keyframes(Shiboken.Object):
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def assign(self, *args, **kwargs): ...
    def __contains__(self, other) -> bool: ...
    def __copy__(self): ...
    def __delitem__(self, other) -> None: ...
    def __getitem__(self, index): ...
    def __iter__(self): ...
    def __len__(self) -> int: ...
    def __setitem__(self, index, object) -> None: ...

class Layer(Shiboken.Object):
    link_to_track: Optional[Layer]
    locked: bool
    matte_color: tuple[float, float, float]
    name: str
    parent: LayerGroup
    psets: ParameterSet
    selected: bool
    stroke_color: tuple[float, float, float]
    visibility: bool
    z_order: int
    def __init__(self, *args, **kwargs) -> None: ...
    def add_bezier_contour(
            self,
            __time: float,
            __bezier_data: BezierContour | list[BezierControlPointData],
            __view=Optional[View]) -> BezierContour: ...
    def add_contour(self, *args, **kwargs): ...
    def add_xspline_contour(self, *args, **kwargs): ...
    def get_contours(self, *args, **kwargs): ...
    def get_link_to_track(self, *args, **kwargs): ...
    def get_locked(self, *args, **kwargs): ...
    def get_matte_color(self, *args, **kwargs): ...
    def get_mesh(self, *args, **kwargs): ...
    def get_name(self, *args, **kwargs): ...
    def get_parent_group(self, *args, **kwargs): ...
    def get_selected(self, *args, **kwargs): ...
    def get_stroke_color(self, *args, **kwargs): ...
    def get_surface_position(self, *args, **kwargs): ...
    def get_transform_matrix(self, *args, **kwargs): ...
    def get_visibility(self, *args, **kwargs): ...
    def get_z_order(self, *args, **kwargs): ...
    def in_point(self, *args, **kwargs): ...
    def initLayerIfNecessary(self, *args, **kwargs): ...
    def isNull(self, *args, **kwargs): ...
    def out_point(self, *args, **kwargs): ...
    def parameter(self, *args, **kwargs): ...
    def parameter_set(self, *args, **kwargs): ...
    def remove(self, *args, **kwargs): ...
    def set_link_to_track(self, *args, **kwargs): ...
    def set_locked(self, *args, **kwargs): ...
    def set_matte_color(self, *args, **kwargs): ...
    def set_name(self, *args, **kwargs): ...
    def set_parent(self, *args, **kwargs): ...
    def set_parent_group(self, *args, **kwargs): ...
    def set_selected(self, *args, **kwargs): ...
    def set_stroke_color(self, *args, **kwargs): ...
    def set_visibility(self, *args, **kwargs): ...
    def set_z_order(self, *args, **kwargs): ...
    def tracking_input_clip(self, *args, **kwargs): ...
    def __bool__(self) -> bool: ...
    def __copy__(self): ...
    def __delattr__(self, name): ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __setattr__(self, name, value): ...
    @property
    def contours(self): ...
    @property
    def mesh(self): ...

class LayerGroup(Shiboken.Object):
    locked: Incomplete
    matte_color: Incomplete
    name: Incomplete
    psets: Incomplete
    stroke_color: Incomplete
    visibility: Incomplete
    z_order: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def find_layers(self, *args, **kwargs): ...
    def get_layers(self, *args, **kwargs): ...
    def get_locked(self, *args, **kwargs): ...
    def get_matte_color(self, *args, **kwargs): ...
    def get_name(self, *args, **kwargs): ...
    def get_stroke_color(self, *args, **kwargs): ...
    def get_visibility(self, *args, **kwargs): ...
    def get_z_order(self, *args, **kwargs): ...
    def insert_child(self, *args, **kwargs): ...
    def isNull(self, *args, **kwargs): ...
    def parameter(self, *args, **kwargs): ...
    def parameter_set(self, *args, **kwargs): ...
    def set_locked(self, *args, **kwargs): ...
    def set_matte_color(self, *args, **kwargs): ...
    def set_name(self, *args, **kwargs): ...
    def set_stroke_color(self, *args, **kwargs): ...
    def set_visibility(self, *args, **kwargs): ...
    def set_z_order(self, *args, **kwargs): ...
    def __bool__(self) -> bool: ...
    def __copy__(self): ...
    def __delattr__(self, name): ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __setattr__(self, name, value): ...
    @property
    def layers(self): ...

class Mesh(Shiboken.Object):
    def __init__(self, *args, **kwargs) -> None: ...
    def get_vertices(self, *args, **kwargs): ...
    def isNull(self, *args, **kwargs): ...
    def __bool__(self) -> bool: ...
    def __copy__(self): ...
    def __delattr__(self, name): ...
    def __setattr__(self, name, value): ...
    @property
    def vertices(self): ...

class MeshVertex(Shiboken.Object):
    selected: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def get_offset(self, *args, **kwargs): ...
    def get_position(self, *args, **kwargs): ...
    def get_selected(self, *args, **kwargs): ...
    def get_track_position(self, *args, **kwargs): ...
    def isNull(self, *args, **kwargs): ...
    def set_selected(self, *args, **kwargs): ...
    def __bool__(self) -> bool: ...
    def __copy__(self): ...
    def __delattr__(self, name): ...
    def __setattr__(self, name, value): ...
    @property
    def offset(self): ...
    @property
    def track_position(self): ...

class Parameter(Shiboken.Object):
    keyframes: Incomplete
    value: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def get(self, *args, **kwargs): ...
    def get_full_path(self, *args, **kwargs): ...
    def get_keyframes(self, *args, **kwargs): ...
    def get_value(self, *args, **kwargs): ...
    def isNull(self, *args, **kwargs): ...
    def set(self, *args, **kwargs): ...
    def set_keyframes(self, *args, **kwargs): ...
    def set_value(self, *args, **kwargs): ...
    def __bool__(self) -> bool: ...
    def __copy__(self): ...
    def __delattr__(self, name): ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __setattr__(self, name, value): ...
    @property
    def full_path(self): ...

class ParameterSet(Shiboken.Object):
    def __init__(self, *args, **kwargs) -> None: ...
    def get_display_name(self, *args, **kwargs): ...
    def get_full_path(self, *args, **kwargs): ...
    def get_parameters(self, *args, **kwargs): ...
    def get_subsets(self, *args, **kwargs): ...
    def isNull(self, *args, **kwargs): ...
    def __bool__(self) -> bool: ...
    def __copy__(self): ...
    def __delattr__(self, name): ...
    def __dir__(self): ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __getitem__(self, index): ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __setattr__(self, name, value): ...
    @property
    def display_name(self): ...
    @property
    def full_path(self): ...
    @property
    def parameters(self): ...
    @property
    def subsets(self): ...

class PixelFormat(Shiboken.Enum):
    BGRColorAlphaFormat: ClassVar[PixelFormat] = ...
    BGRColorFormat: ClassVar[PixelFormat] = ...
    GreyLevelAlphaFormat: ClassVar[PixelFormat] = ...
    GreyLevelFormat: ClassVar[PixelFormat] = ...
    RGBASFormat: ClassVar[PixelFormat] = ...
    RGBColorAlphaFormat: ClassVar[PixelFormat] = ...
    RGBColorFormat: ClassVar[PixelFormat] = ...
    RGBXFormat: ClassVar[PixelFormat] = ...
    UndefinedFormat: ClassVar[PixelFormat] = ...
    VectorField2DFormat: ClassVar[PixelFormat] = ...
    VectorField3DFormat: ClassVar[PixelFormat] = ...
    YUV422Format: ClassVar[PixelFormat] = ...
    YUVA444Format: ClassVar[PixelFormat] = ...
    YUVX444Format: ClassVar[PixelFormat] = ...
    values: ClassVar[dict] = ...
    name: Incomplete
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def __add__(self, other): ...
    def __and__(self, other): ...
    def __bool__(self) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __mul__(self, other): ...
    def __ne__(self, other: object) -> bool: ...
    def __or__(self, other): ...
    def __pos__(self): ...
    def __radd__(self, other): ...
    def __rand__(self, other): ...
    def __reduce__(self): ...
    def __rmul__(self, other): ...
    def __ror__(self, other): ...
    def __rsub__(self, other): ...
    def __rxor__(self, other): ...
    def __sub__(self, other): ...
    def __xor__(self, other): ...

class ProgressWatcher(PySide2.QtCore.QObject):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def finished(self, *args, **kwargs): ...
    def progress_message(self, *args, **kwargs): ...
    def progress_status(self, *args, **kwargs): ...
    def started(self, *args, **kwargs): ...
    def __delattr__(self, name): ...
    def __setattr__(self, name, value): ...

class Project:
    default_hero_view: View
    first_frame_offset: int
    frame_rate: float
    in_out_range: tuple[int, int]
    length: int
    notes: str
    playback_in_point: int
    playback_out_point: int
    psets: ParameterSet
    views: list[ViewInfo]
    def __init__(self,
        project_file: Optional[str],
        detached_clip: Optional[Clip]=None,
        interlace_mode: Optional[InterlaceMode]=None) -> None: ...
    def add_clip(self, __detached_clip: Clip, __clip_name: str) -> Clip:
    def add_group(self, *args, **kwargs): ...
    def add_layer(self, *args, **kwargs): ...
    def export_rendered_shapes(self, *args, **kwargs): ...
    def find_groups(self, *args, **kwargs): ...
    def find_layers(self, *args, **kwargs): ...
    def get_clips(self) -> dict[str, Clip]: ...
    def get_default_hero_view(self, *args, **kwargs): ...
    def get_default_trackable_clip(self, *args, **kwargs): ...
    def get_first_frame_offset(self, *args, **kwargs): ...
    def get_frame_rate(self, *args, **kwargs): ...
    def get_groups(self, *args, **kwargs): ...
    def get_in_out_range(self, *args, **kwargs): ...
    def get_interlace_mode(self, *args, **kwargs): ...
    def get_layers(self, *args, **kwargs): ...
    def get_length(self, *args, **kwargs): ...
    def get_notes(self, *args, **kwargs): ...
    def get_output_dir(self, *args, **kwargs): ...
    def get_playback_in_point(self, *args, **kwargs): ...
    def get_playback_out_point(self, *args, **kwargs): ...
    def get_progress_watcher(self, *args, **kwargs): ...
    def get_project_file(self, *args, **kwargs): ...
    def get_views(self, *args, **kwargs): ...
    def layer(self, *args, **kwargs): ...
    def new_output_clip(self, __input_clip: Clip, __clip_name: str) -> Clip: ...
    def parameter(self, *args, **kwargs): ...
    def parameter_set(self, *args, **kwargs): ...
    def render(self, *args, **kwargs): ...
    def save(self) -> None: ...
    def save_as(self,file_name: str) -> None: ...
    def set_default_hero_view(self, *args, **kwargs): ...
    def set_first_frame_offset(self, *args, **kwargs): ...
    def set_frame_rate(self, *args, **kwargs): ...
    def set_in_out_range(self, *args, **kwargs): ...
    def set_length(self, *args, **kwargs): ...
    def set_notes(self, *args, **kwargs): ...
    def set_output_dir(self, *args, **kwargs): ...
    def set_playback_in_point(self, *args, **kwargs): ...
    def set_playback_out_point(self, *args, **kwargs): ...
    def set_views(self, *args, **kwargs): ...
    def track_layers(self, *args, **kwargs): ...
    def undo_group(self, *args, **kwargs): ...
    def __delattr__(self, name): ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __setattr__(self, name, value): ...
    @property
    def clips(self) -> list[Clip]: ...
    @property
    def default_trackable_clip(self) -> View: ...
    @property
    def groups(self) -> list[LayerGroup]: ...
    @property
    def interlace_mode(self) -> InterlaceMode: ...
    @property
    def layers(self) -> list[Layer]: ...
    @property
    def progress_watcher(self) -> ProgressWatcher: ...
    @property
    def project_file(self) -> str: ...

class RenderInsertOperation(RenderOperation):
    def __init__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name): ...
    def __setattr__(self, name, value): ...

class RenderOperation(Shiboken.Object):
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def get_progress_watcher(self, *args, **kwargs): ...
    def __delattr__(self, name): ...
    def __setattr__(self, name, value): ...
    @property
    def progress_watcher(self): ...

class RenderRemoveOperation(RenderOperation):
    def __init__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name): ...
    def __setattr__(self, name, value): ...

class RenderReorientOperation(RenderOperation):
    def __init__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name): ...
    def __setattr__(self, name, value): ...

class RenderStabilizeOperation(RenderOperation):
    def __init__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name): ...
    def __setattr__(self, name, value): ...

class StreamInfo(Shiboken.Object):
    end_frame: Incomplete
    index_width: Incomplete
    path: Incomplete
    prefix: Incomplete
    start_frame: Incomplete
    suffix: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def get_end_frame(self, *args, **kwargs): ...
    def get_index_width(self, *args, **kwargs): ...
    def get_path(self, *args, **kwargs): ...
    def get_prefix(self, *args, **kwargs): ...
    def get_start_frame(self, *args, **kwargs): ...
    def get_suffix(self, *args, **kwargs): ...
    def set_end_frame(self, *args, **kwargs): ...
    def set_index_width(self, *args, **kwargs): ...
    def set_path(self, *args, **kwargs): ...
    def set_prefix(self, *args, **kwargs): ...
    def set_start_frame(self, *args, **kwargs): ...
    def set_suffix(self, *args, **kwargs): ...
    def __copy__(self): ...

class UndoGroup(Shiboken.Object):
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def commit(self, *args, **kwargs): ...
    def redo(self, *args, **kwargs): ...
    def rollback(self, *args, **kwargs): ...
    def undo(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __enter__(self): ...
    def __exit__(self, type: type[BaseException] | None, value: BaseException | None, traceback: types.TracebackType | None): ...

class Vector2f(Shiboken.Object):
    x: Incomplete
    y: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def get_x(self, *args, **kwargs): ...
    def get_y(self, *args, **kwargs): ...
    def length(self, *args, **kwargs): ...
    def normalise(self, *args, **kwargs): ...
    def set_x(self, *args, **kwargs): ...
    def set_y(self, *args, **kwargs): ...
    def __add__(self, other): ...
    def __copy__(self): ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __mul__(self, other): ...
    def __ne__(self, other: object) -> bool: ...
    def __radd__(self, other): ...
    def __rmul__(self, other): ...
    def __rsub__(self, other): ...
    def __rtruediv__(self, other): ...
    def __sub__(self, other): ...
    def __truediv__(self, other): ...

class View(Shiboken.Object):
    def __init__(self, *args, **kwargs) -> None: ...
    def get_id(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    @property
    def id(self): ...

class ViewInfo(Shiboken.Object):
    abbr: Incomplete
    color: Incomplete
    name: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def get_abbr(self, *args, **kwargs): ...
    def get_color(self, *args, **kwargs): ...
    def get_name(self, *args, **kwargs): ...
    def set_abbr(self, *args, **kwargs): ...
    def set_color(self, *args, **kwargs): ...
    def set_name(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class XControlPoint(Shiboken.Object):
    psets: Incomplete
    selected: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def get_master_point(self, *args, **kwargs): ...
    def get_point_data(self, *args, **kwargs): ...
    def get_selected(self, *args, **kwargs): ...
    def parameter(self, *args, **kwargs): ...
    def parameter_set(self, *args, **kwargs): ...
    def remove(self, *args, **kwargs): ...
    def set_master_point(self, *args, **kwargs): ...
    def set_point_data(self, *args, **kwargs): ...
    def set_selected(self, *args, **kwargs): ...
    def update_point_data(self, *args, **kwargs): ...
    def __bool__(self) -> bool: ...
    def __copy__(self): ...
    def __delattr__(self, name): ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __setattr__(self, name, value): ...
    @property
    def master_point(self): ...

class XControlPointData(Shiboken.Object):
    active: Incomplete
    corner: Incomplete
    edge_angle_ratio: Incomplete
    edge_width: Incomplete
    weight: Incomplete
    x: Incomplete
    y: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def get_active(self, *args, **kwargs): ...
    def get_corner(self, *args, **kwargs): ...
    def get_edge_angle_ratio(self, *args, **kwargs): ...
    def get_edge_width(self, *args, **kwargs): ...
    def get_weight(self, *args, **kwargs): ...
    def get_x(self, *args, **kwargs): ...
    def get_y(self, *args, **kwargs): ...
    def set_active(self, *args, **kwargs): ...
    def set_corner(self, *args, **kwargs): ...
    def set_edge_angle_ratio(self, *args, **kwargs): ...
    def set_edge_width(self, *args, **kwargs): ...
    def set_weight(self, *args, **kwargs): ...
    def set_x(self, *args, **kwargs): ...
    def set_y(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class XSplineContour(Shiboken.Object):
    control_points: Incomplete
    psets: Incomplete
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def control_point(self, *args, **kwargs): ...
    def get_bounding_rect(self, *args, **kwargs): ...
    def get_control_points(self, *args, **kwargs): ...
    def insert_point(self, *args, **kwargs): ...
    def isNull(self, *args, **kwargs): ...
    def parameter(self, *args, **kwargs): ...
    def parameter_set(self, *args, **kwargs): ...
    def remove(self, *args, **kwargs): ...
    def set_control_points(self, *args, **kwargs): ...
    def __bool__(self) -> bool: ...
    def __copy__(self): ...
    def __delattr__(self, name): ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __setattr__(self, name, value): ...

def get_license_path(*args, **kwargs): ...
def set_license_search_path(*args, **kwargs): ...
def get_current_project() -> Project: ...
