from .exporters import AbstractShapeDataExporter as AbstractShapeDataExporter, AbstractTrackingDataExporter as AbstractTrackingDataExporter, ShapeExportData as ShapeExportData
from .project import BezierContour as BezierContour, View as View, XSplineContour as XSplineContour
from _typeshed import Incomplete

class Matrix3x3:
    def __init__(self, seq: Incomplete | None = None) -> None: ...
    def ident(self) -> None: ...
    def __mul__(self, other): ...
    def __getattr__(self, item): ...
    def __setattr__(self, key, value): ...
    def __iter__(self): ...
    def __getitem__(self, item): ...
    def transposed(self): ...
    def inverted(self) -> None: ...

class Matrix4x4:
    def __init__(self, seq: Incomplete | None = None) -> None: ...
    def ident(self) -> None: ...
    def __mul__(self, other): ...
    def __getattr__(self, item): ...
    def __setattr__(self, key, value): ...
    def __iter__(self): ...
    def __getitem__(self, item): ...
    def transposed(self): ...
    def inverted(self): ...

def new_sfx_uuid(): ...

class SilhouetteExporter(AbstractShapeDataExporter):
    def __init__(self) -> None: ...
    def error_string(self): ...
    def do_export(self, project, layers, path, views): ...
    def default_sfx_node(self, parent, name, type_name, label, **attrs): ...
    @staticmethod
    def properties_node(parent, **constant_props): ...
    @property
    def id_counter(self): ...

class MistikaExporter(AbstractTrackingDataExporter):
    def __init__(self) -> None: ...
    def error_string(self): ...
    def get_surface_parameters(self, layer, time, view): ...
    def do_export(self, project, layer, tracking_file_path, time, view, options): ...
